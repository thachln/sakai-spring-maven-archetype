<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
        ">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
<!-- 	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
<!-- 		<property name="prefix" value="/WEB-INF/views/" /> -->
<!-- 		<property name="suffix" value=".jsp" /> -->
<!-- 	</bean> -->

  <!-- New bean added for using Spring tiles -->
<!--     <bean id="viewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver"/> -->

<!--     <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"> -->
<!--       <property name="definitions"> -->
<!--         <list> -->
<!--           <value>/WEB-INF/views/layouts/layouts.xml</value> -->
<!--           <value>/WEB-INF/views/**/views.xml</value> -->
<!--         </list> -->
<!--       </property> -->
<!--     </bean> -->

<!-- Using Thymeleaf for layout. Refer: http://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html -->
	<bean id="templateResolver" class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
	  <property name="prefix" value="/WEB-INF/templates/" />
	  <property name="suffix" value=".html" />
	  <property name="templateMode" value="HTML" />
	  <property name="cacheable" value="false"/>
	  <property name="characterEncoding" value="UTF-8"/>
	</bean>

	<bean id="templateEngine" class="org.thymeleaf.spring5.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<property name="enableSpringELCompiler" value="true" />
	</bean>

	<bean class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
	  <property name="templateEngine" ref="templateEngine" />
	  <property name="characterEncoding" value="UTF-8"/>
	  <property name="order" value="1" />
	</bean>

    <!-- Load configuration file. -->
    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="location">
            <value>/WEB-INF/app-config.properties</value>
        </property>
    </bean>

	<context:component-scan base-package="${package}" />
	
	<!-- Datasource -->
	<!-- Step 1 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.mariadb.jdbc.Driver" />
		<property name="url" value="jdbc:mariadb://127.0.0.1:3306/sakai?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="username" value="" />
		<property name="password" value="" />
<!-- 		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver" /> -->
<!-- 		<property name="url" value="jdbc:mysql://127.0.0.1:3306/sakai?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false" /> -->
<!-- 		<property name="driverClassName" value="org.postgresql.Driver" /> -->
<!-- 		<property name="url" value="jdbc:postgresql://localhost:5432/sakaiapp" /> -->


		
<!-- 		<property name="driverClassName" value="org.postgresql.Driver" /> -->
<!-- 		<property name="url" value="jdbc:postgresql://localhost:5439/yourdb" /> -->
<!-- 		<property name="username" value="" /> -->
<!-- 		<property name="password" value="" /> -->
	</bean>
	
	<!-- Step 2 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="${package}.entity" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
<!-- 				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop> -->
				<prop key="hibernate.globally_quoted_identifiers">true</prop>
			</props>
		</property>
	</bean>
	
	<!-- Step 3 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<jpa:repositories base-package="${package}.repository" />
</beans>
